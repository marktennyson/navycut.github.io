{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Navycut - The Fullstack WebFramework \u00b6 Documentation: https://navycut.github.io Github Repo: https://github.com/navycut/navycut Overview \u00b6 With Navycut, you can take Web applications from concept to launch in a matter of hours. Navycut takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Why Navycut \u00b6 Navycut provides the Flask based fullstack web development platform to create an interactive website instantly. Fullstack Support \u00b6 Navycut has the Flask based backend system as well as the Jinja2 Based template rendering system to design the frontend. Ridiculously Fast \u00b6 Navycut was designed to help developers take applications from concept to completion as quickly as possible. Fully Loaded \u00b6 Navycut includes dozens of extras you can use to handle common Web development tasks. Navycut takes care of user authentication, content administration, site maps, RSS feeds, and many more tasks \u2014 right out of the box. Reassuringly Secure \u00b6 Navycut takes security seriously and helps developers avoid many common security mistakes, such as SQL injection, cross-site scripting, cross-site request forgery and clickjacking. Its user authentication system provides a secure way to manage user accounts and passwords. Incredibly Versatile \u00b6 Companies, organizations and governments have used Django to build all sorts of things \u2014 from content management systems to social networks to scientific computing platforms.","title":"Navycut"},{"location":"#navycut-the-fullstack-webframework","text":"Documentation: https://navycut.github.io Github Repo: https://github.com/navycut/navycut","title":"Navycut - The Fullstack WebFramework"},{"location":"#overview","text":"With Navycut, you can take Web applications from concept to launch in a matter of hours. Navycut takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source.","title":"Overview"},{"location":"#why-navycut","text":"Navycut provides the Flask based fullstack web development platform to create an interactive website instantly.","title":"Why Navycut"},{"location":"#fullstack-support","text":"Navycut has the Flask based backend system as well as the Jinja2 Based template rendering system to design the frontend.","title":"Fullstack Support"},{"location":"#ridiculously-fast","text":"Navycut was designed to help developers take applications from concept to completion as quickly as possible.","title":"Ridiculously Fast"},{"location":"#fully-loaded","text":"Navycut includes dozens of extras you can use to handle common Web development tasks. Navycut takes care of user authentication, content administration, site maps, RSS feeds, and many more tasks \u2014 right out of the box.","title":"Fully Loaded"},{"location":"#reassuringly-secure","text":"Navycut takes security seriously and helps developers avoid many common security mistakes, such as SQL injection, cross-site scripting, cross-site request forgery and clickjacking. Its user authentication system provides a secure way to manage user accounts and passwords.","title":"Reassuringly Secure"},{"location":"#incredibly-versatile","text":"Companies, organizations and governments have used Django to build all sorts of things \u2014 from content management systems to social networks to scientific computing platforms.","title":"Incredibly Versatile"},{"location":"documentation/","text":"Basic documentation \u00b6","title":"Documentation"},{"location":"documentation/#basic-documentation","text":"","title":"Basic documentation"},{"location":"installation/","text":"Installation \u00b6 Being a Python Web framework, Python requires Python. You must need to use Python version 3.6 or later. Python includes a lightweight database called SQLite so you won\u2019t need to set up a database just yet. Get the latest version of Python at https://www.python.org/downloads/ or with your operating system\u2019s package manager. You can verify that Python is installed by typing python from your shell; you should see something like: Python 3. x . y [ GCC 4. x ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>> Install navycut from pypi using pip: \u00b6 pip install -U navycut Install navycut from source code: \u00b6 git clone https://github.com/navycut/navycut.git cd navycut python setup.py install To verify that Navycut can be seen by Python, type python from your shell. Then at the Python prompt, try to import navycut: \u00b6 >>> import navycut >>> print ( navycut.get_version ()) 0 .0.4","title":"Installation"},{"location":"installation/#installation","text":"Being a Python Web framework, Python requires Python. You must need to use Python version 3.6 or later. Python includes a lightweight database called SQLite so you won\u2019t need to set up a database just yet. Get the latest version of Python at https://www.python.org/downloads/ or with your operating system\u2019s package manager. You can verify that Python is installed by typing python from your shell; you should see something like: Python 3. x . y [ GCC 4. x ] on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>>","title":"Installation"},{"location":"installation/#install-navycut-from-pypi-using-pip","text":"pip install -U navycut","title":"Install navycut from pypi using pip:"},{"location":"installation/#install-navycut-from-source-code","text":"git clone https://github.com/navycut/navycut.git cd navycut python setup.py install","title":"Install navycut from source code:"},{"location":"installation/#to-verify-that-navycut-can-be-seen-by-python-type-python-from-your-shell-then-at-the-python-prompt-try-to-import-navycut","text":">>> import navycut >>> print ( navycut.get_version ()) 0 .0.4","title":"To verify that Navycut can be seen by Python, type python from your shell. Then at the Python prompt, try to import navycut:"},{"location":"introduction/","text":"Intro to Navycut \u00b6 The basic introduction about the stack and features of Navyvut project. Object relational mapper \u00b6 De\ufb01ne your data models entirely in Python using SQLAlchemy. You get a rich, dynamic database-access API for free \u2014 but you can still write SQL if needed. from navycut.orm import sql class Band ( sql . Model ): \"\"\"A model of a rock band.\"\"\" id = sql . fields . Integer ( pk = True ) name = sql . fields . Char ( max_length = 200 ) can_rock = sql . fields . Boolean ( default = True ) class Member ( sql . Model ): \"\"\"A model of a rock band member.\"\"\" id = sql . fields . Integer ( pk = True ) name = sql . fields . Char ( help_text = \"Member's name\" , max_length = 200 ) instrument = sql . fields . Char ( choices = ( ( 'g' , \"Guitar\" ), ( 'b' , \"Bass\" ), ( 'd' , \"Drums\" ), ), max_length = 1 ) band = sql . fields . ForeignKey ( \"Band\" ) Urls and Views \u00b6 A clean, elegant URL scheme is an important detail in a high-quality Web application. Navycut encourages beautiful URL design and doesn\u2019t put any cruft in URLs, like .php or .asp. To design URLs for an application, you create a Python module called a URLconf. Like a table of contents for your app, it contains a simple mapping between URL patterns and your views. from navycut.urls import path , url , include from . import views \"\"\" The default url_prefix is the app name i.e \"/band\" for this case. If you want to change it and use your own customized name then plese update the url_prefix for a particular app on the sister.py file under the AppSister class. \"\"\" urlpatterns = [ path ( '/' , views . BandView , name = 'band-list' ), url ( '/<int:id>' , views . band_detail , name = 'band-detail' ), url ( '/search/?id=1' , views . band_search , name = 'band-search' ), include ( '/polls' , 'polls.urls' ) # include urlpatterns from another app ] from navycut.urls import MethodView from .models import Band class BandView ( MethodView ): def get ( self ): bands = Band . query . all () return self . render ( 'bands/band_listing.html' , { 'bands' : bands }) def band_details ( req , res , id ): band = Band . query . get ( id ) return res . json ( band ) def band_search ( req , res ): id = int ( req . args . get ( 'id' )) band = Band . query . get ( id ) return res . json ( band ) Templates \u00b6 Navycut's template language(Jinja2) is designed to strike a balance between power and ease. It\u2019s designed to feel comfortable and easy-to-learn to those used to working with HTML, like designers and front-end developers. But it is also flexible and highly extensible, allowing developers to augment the template language as needed. < html > < head > < title > Band Listing </ title > </ head > < body > < h1 > All Bands </ h1 > < ul > </ ul > </ body > Forms \u00b6 Navycut provides a powerful form library using wt-form that handles rendering forms as HTML, validating user-submitted data, and converting that data to native Python types. Navycut also provides a way to generate forms from your existing models and use those forms to create and update data. class RegistrationForm ( forms . Form ): username = forms . StringField ( 'Username' , [ forms . validators . Length ( min = 4 , max = 25 )]) email = forms . StringField ( 'Email Address' , [ forms . validators . Length ( min = 6 , max = 35 )]) password = forms . PasswordField ( 'New Password' , [ forms . validators . DataRequired (), forms . validators . EqualTo ( 'confirm' , message = 'Passwords must match' ) ]) confirm = forms . PasswordField ( 'Repeat Password' ) accept_tos = forms . BooleanField ( 'I accept the TOS' , [ forms . validators . DataRequired ()]) Authentication \u00b6 Navycut comes with a full-featured and secure authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This lets you easily build sites that allow users to create accounts and safely log in/out. from navycut.auth import login_required , current_user from navycut.http import JsonResponse from navycut.urls import MethodView class AuthView ( MethodView ): @login_required def get ( self ): return JsonResponse ( logged_in_username = current_user . username ) Admin Panel \u00b6 One of the most powerful parts of Navycut is its automatic admin interface. It reads metadata in your models to provide a powerful and production-ready interface that content producers can immediately use to start managing content on your site. It\u2019s easy to set up and provides many hooks for customization. Basically Navycut uses the default flask_admin module to provide this service. from navycut.admin import admin from navycut.admin.site.views import NCAdminModelView from .models import Band , Member class MemberAdminModelView ( NCAdminModelView ): \"\"\"Customize the look of the auto-generated admin for the Member model\"\"\" excluded_fields = [ 'name' ,] admin . register_model ( Band ) # Use the default options admin . register_model ( Member , MemberAdminModelView ) # Use the customized options Internationalization \u00b6 No service till now, need to develop. Security \u00b6 Navycut provides multiple protections against: Clickjacking Cross-site scripting Cross Site Request Forgery (CSRF) SQL injection Remote code execution","title":"Introduction"},{"location":"introduction/#intro-to-navycut","text":"The basic introduction about the stack and features of Navyvut project.","title":"Intro to Navycut"},{"location":"introduction/#object-relational-mapper","text":"De\ufb01ne your data models entirely in Python using SQLAlchemy. You get a rich, dynamic database-access API for free \u2014 but you can still write SQL if needed. from navycut.orm import sql class Band ( sql . Model ): \"\"\"A model of a rock band.\"\"\" id = sql . fields . Integer ( pk = True ) name = sql . fields . Char ( max_length = 200 ) can_rock = sql . fields . Boolean ( default = True ) class Member ( sql . Model ): \"\"\"A model of a rock band member.\"\"\" id = sql . fields . Integer ( pk = True ) name = sql . fields . Char ( help_text = \"Member's name\" , max_length = 200 ) instrument = sql . fields . Char ( choices = ( ( 'g' , \"Guitar\" ), ( 'b' , \"Bass\" ), ( 'd' , \"Drums\" ), ), max_length = 1 ) band = sql . fields . ForeignKey ( \"Band\" )","title":"Object relational mapper"},{"location":"introduction/#urls-and-views","text":"A clean, elegant URL scheme is an important detail in a high-quality Web application. Navycut encourages beautiful URL design and doesn\u2019t put any cruft in URLs, like .php or .asp. To design URLs for an application, you create a Python module called a URLconf. Like a table of contents for your app, it contains a simple mapping between URL patterns and your views. from navycut.urls import path , url , include from . import views \"\"\" The default url_prefix is the app name i.e \"/band\" for this case. If you want to change it and use your own customized name then plese update the url_prefix for a particular app on the sister.py file under the AppSister class. \"\"\" urlpatterns = [ path ( '/' , views . BandView , name = 'band-list' ), url ( '/<int:id>' , views . band_detail , name = 'band-detail' ), url ( '/search/?id=1' , views . band_search , name = 'band-search' ), include ( '/polls' , 'polls.urls' ) # include urlpatterns from another app ] from navycut.urls import MethodView from .models import Band class BandView ( MethodView ): def get ( self ): bands = Band . query . all () return self . render ( 'bands/band_listing.html' , { 'bands' : bands }) def band_details ( req , res , id ): band = Band . query . get ( id ) return res . json ( band ) def band_search ( req , res ): id = int ( req . args . get ( 'id' )) band = Band . query . get ( id ) return res . json ( band )","title":"Urls and Views"},{"location":"introduction/#templates","text":"Navycut's template language(Jinja2) is designed to strike a balance between power and ease. It\u2019s designed to feel comfortable and easy-to-learn to those used to working with HTML, like designers and front-end developers. But it is also flexible and highly extensible, allowing developers to augment the template language as needed. < html > < head > < title > Band Listing </ title > </ head > < body > < h1 > All Bands </ h1 > < ul > </ ul > </ body >","title":"Templates"},{"location":"introduction/#forms","text":"Navycut provides a powerful form library using wt-form that handles rendering forms as HTML, validating user-submitted data, and converting that data to native Python types. Navycut also provides a way to generate forms from your existing models and use those forms to create and update data. class RegistrationForm ( forms . Form ): username = forms . StringField ( 'Username' , [ forms . validators . Length ( min = 4 , max = 25 )]) email = forms . StringField ( 'Email Address' , [ forms . validators . Length ( min = 6 , max = 35 )]) password = forms . PasswordField ( 'New Password' , [ forms . validators . DataRequired (), forms . validators . EqualTo ( 'confirm' , message = 'Passwords must match' ) ]) confirm = forms . PasswordField ( 'Repeat Password' ) accept_tos = forms . BooleanField ( 'I accept the TOS' , [ forms . validators . DataRequired ()])","title":"Forms"},{"location":"introduction/#authentication","text":"Navycut comes with a full-featured and secure authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. This lets you easily build sites that allow users to create accounts and safely log in/out. from navycut.auth import login_required , current_user from navycut.http import JsonResponse from navycut.urls import MethodView class AuthView ( MethodView ): @login_required def get ( self ): return JsonResponse ( logged_in_username = current_user . username )","title":"Authentication"},{"location":"introduction/#admin-panel","text":"One of the most powerful parts of Navycut is its automatic admin interface. It reads metadata in your models to provide a powerful and production-ready interface that content producers can immediately use to start managing content on your site. It\u2019s easy to set up and provides many hooks for customization. Basically Navycut uses the default flask_admin module to provide this service. from navycut.admin import admin from navycut.admin.site.views import NCAdminModelView from .models import Band , Member class MemberAdminModelView ( NCAdminModelView ): \"\"\"Customize the look of the auto-generated admin for the Member model\"\"\" excluded_fields = [ 'name' ,] admin . register_model ( Band ) # Use the default options admin . register_model ( Member , MemberAdminModelView ) # Use the customized options","title":"Admin Panel"},{"location":"introduction/#internationalization","text":"No service till now, need to develop.","title":"Internationalization"},{"location":"introduction/#security","text":"Navycut provides multiple protections against: Clickjacking Cross-site scripting Cross Site Request Forgery (CSRF) SQL injection Remote code execution","title":"Security"}]}